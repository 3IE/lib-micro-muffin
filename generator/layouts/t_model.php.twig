<?php
abstract class {{ tClassName }} extends \Lib\Models\Deletable
{
  protected static $table_name = '{{ tableName }}';
  protected static $sequence_name = '{{ sequenceName }}';
  protected static $primary_keys = array({{ primaryKey }});

{% for f in fields %}
  protected $_{{ f.getName }} = {{ f.defaultValueToString }};

  public function get{{ f.getCapName }}()
  {
    return $this->_{{ f.getName }};
  }

  public function set{{ f.getCapName }}(${{ f.getName }})
  {
    $this->_objectEdited();
    $this->_{{ f.getName }} = ${{ f.getName }};
  }

{% endfor %}

{% for mto in manyToOne %}
  protected $_{{ mto.getField }} = null;

  private function get{{ mto.getField | capitalize }}()
  {
    return $this->_{{ mto.getField }};
  }

  private function set{{ mto.getField | capitalize }}(${{ mto.getField }})
  {
    $this->_objectEdited();
    $this->_{{ mto.getField }} = ${{ mto.getField }};
  }

{% set className = mto.getTargetTable | capitalize | removeS %}
{% set attrName = mto.getTargetTable | removeS %}
  /** @var {{ className }} */
  protected ${{ attrName }} = null;

  /** @return {{ className }} */
  public function get{{ className }}()
  {
    if (is_null($this->{{ attrName }}))
      $this->{{ attrName }} = {{ className }}::find($this->_{{ mto.getField }});
     return $this->{{ attrName }};
  }

  /** @param {{ className }} ${{ attrName }} */
  public function set{{ className }}(${{ attrName }})
  {
    $this->{{ attrName }} = ${{ attrName }};
    $this->_{{ mto.getField }} = ${{ attrName}}->get{{ mto.getTargetField | capitalize }}();
    $this->_objectEdited();
  }
{% endfor %}

  /**
  {{ find_params }}
   * @return {{ finalClassName }}
   */
  public static function find({{ find_proto }})
  {
    $pdo = \Lib\PDOS::getInstance();
    $query = $pdo->prepare('SELECT * FROM {{ findProcedureName }}({{ find_placeholder }})');

    //Parameters binding
{% for f in pkFields %}
    if (is_string(${{ f }}))
      $query->bindValue(':{{ f }}', ${{ f }}, PDO::PARAM_STR);
    else
      $query->bindValue(':{{ f }}', ${{ f }});
{% endfor %}

    $query->execute();
    {{ find_result }} = $query->fetch();

    if (!is_null({{ find_result }}) && {{ find_checkNull }})
    {
      $output_object = new {{ finalClassName }}();
      self::hydrate($output_object, {{ find_result }});
      return $output_object;
    }
    else
      return null;
  }
}