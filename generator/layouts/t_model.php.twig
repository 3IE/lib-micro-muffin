<?php
abstract class {{ tClassName }} extends \Lib\Models\Deletable
{
  protected static $_table_name    = '{{ tableName }}';
  protected static $_primary_keys  = array({{ primaryKey }});
  protected static $_fields        = array({{ field_list }});
  protected static $_sequences     = array({{ sequencesArray }});

{% for f in fields %}
  protected $_{{ f.getName }} = {{ f.defaultValueToString }};

  public function get{{ f.getCapName }}()
  {
    return $this->_{{ f.getName }};
  }

  public function set{{ f.getCapName }}(${{ f.getName }})
  {
    $this->_objectEdited();
    $this->_{{ f.getName }} = ${{ f.getName }};
  }

{% endfor %}

{% for mto in manyToOne %}
  protected $_{{ mto.getField }} = null;

  public function get{{ mto.getField | capitalize }}()
  {
    return $this->_{{ mto.getField }};
  }

  public function set{{ mto.getField | capitalize }}(${{ mto.getField }})
  {
    $this->_objectEdited();
    $this->_{{ mto.getField }} = ${{ mto.getField }};
  }

{% set className = mto.getTargetTable | capitalize | removeS %}
{% set attrName = mto.getCleanField %}
  /** @var {{ className }} */
  protected ${{ attrName }} = null;

  /** @return {{ className }} */
  public function get{{ attrName | capitalize }}()
  {
    if (is_null($this->{{ attrName }}))
      $this->{{ attrName }} = {{ className }}::find($this->_{{ mto.getField }});
     return $this->{{ attrName }};
  }

  /** @param {{ className }} ${{ attrName }} */
  public function set{{ attrName | capitalize }}(${{ attrName }})
  {
    $this->{{ attrName }} = ${{ attrName }};
    $this->_{{ mto.getField }} = ${{ attrName}}->get{{ mto.getTargetField | capitalize }}();
    $this->_objectEdited();
  }
{% endfor %}

{% for otm in oneToMany %}
{% set className = otm.getTargetTable | capitalize | removeS %}
{% set attribute = otm.getTargetTable ~ 'From' ~ (otm.getCleanField | capitalize) %}
  /** @var {{ className }}[] */
  protected ${{ attribute }} = null;

  /**
   * @param string $order
   * @return {{ className }}[]
   */
  public function get{{ attribute | capitalize }}($order = null)
  {
    if (is_null($this->{{ attribute }}))
    {
      $pdo = \Lib\PDOS::getInstance();
      if (!is_null($order))
        $query = $pdo->prepare('SELECT * FROM {{ otm.getProcedureName }}(' . $this->_{{ otm.getField }} . ') ORDER BY ' . $order);
      else
        $query = $pdo->prepare('SELECT * FROM {{ otm.getProcedureName }}(' . $this->_{{ otm.getField }} . ')');
      $query->execute();

      $results  = $query->fetchAll();
      $objs     = array();
      foreach ($results as $r)
      {
        $obj = new {{ className }}();
        self::hydrate($obj, $r);
        $objs[] = $obj;
      }
      $this->{{ attribute }} = $objs;
    }
    return $this->{{ attribute }};
  }
{% endfor %}

  /**
  {{ find_params }}
   * @return {{ finalClassName }}
   */
  public static function find({{ find_proto }})
  {
    $pdo = \Lib\PDOS::getInstance();
    $query = $pdo->prepare('SELECT * FROM {{ findProcedureName }}({{ find_placeholder }})');

    //Parameters binding
    $driver = \Lib\MicroMuffin::getDBDriver();
{% for f in pkFields %}
    $driver::bindPDOValue($query, ':{{ f.getName }}', ${{ f.getName }});
{% endfor %}

    $query->execute();
    {{ find_result }} = $query->fetch();

    if (!is_null({{ find_result }}) && {{ find_checkNull }})
    {
      $output_object = new {{ finalClassName }}();
      self::hydrate($output_object, {{ find_result }});
      return $output_object;
    }
    else
      return null;
  }
}